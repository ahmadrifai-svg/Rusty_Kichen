/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import config.koneksi;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import java.math.BigInteger;
import javax.swing.UIManager;
import com.fazecast.jSerialComm.SerialPort;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import main.MenuKasir;
import main.MenuUtama;
import model.modelUser;

public class FormRfid extends javax.swing.JFrame {

    int xx, xy;
    private Connection conn;

    public FormRfid() {
        initComponents();
        conn = koneksi.getConnection();
        setActionButton();
        tambahListenerRFID();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_login = new Palette.Custom_ButtonRounded();
        eye = new javax.swing.JLabel();
        hideEye = new javax.swing.JLabel();
        txt_rfid = new Palette.JTextfieldRounded();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_login.setBackground(new java.awt.Color(255, 255, 255));
        btn_login.setForeground(new java.awt.Color(0, 0, 0));
        btn_login.setText("Login\n");
        btn_login.setFillOriginal(new java.awt.Color(255, 255, 255));
        btn_login.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        btn_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loginActionPerformed(evt);
            }
        });
        getContentPane().add(btn_login, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 470, 140, 50));

        eye.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Eyes.png"))); // NOI18N
        getContentPane().add(eye, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 490, -1, -1));

        hideEye.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Hide.png"))); // NOI18N
        getContentPane().add(hideEye, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 490, -1, -1));

        txt_rfid.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_rfid, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 390, 360, 60));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Login (6).png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loginActionPerformed
      prosesLogin();
    }//GEN-LAST:event_btn_loginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        UIManager.put("Component.arc", 15);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormRfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormRfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormRfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormRfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormRfid().setVisible(true);
            }
        });
    }

    //fungsi eye 
    private void setActionButton() {
        eye.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                eye.setVisible(false);
                hideEye.setVisible(true);
               
            }
        });

        hideEye.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                eye.setVisible(true);
                hideEye.setVisible(false);
              
            }
        });
        btn_login.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                prosesLogin();
            }

        });

      

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Palette.Custom_ButtonRounded btn_login;
    private javax.swing.JLabel eye;
    private javax.swing.JLabel hideEye;
    private javax.swing.JLabel jLabel1;
    private Palette.JTextfieldRounded txt_rfid;
    // End of variables declaration//GEN-END:variables

    private void tambahListenerRFID() {
        txt_rfid.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                SwingUtilities.invokeLater(() -> {
                    autoLoginRfid();
                });
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                // Tidak perlu aksi saat penghapusan
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // Tidak digunakan untuk JTextField biasa
            }
        });
    }

    public String getMd5java(String message) {
        String digest = null;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] hash = md.digest(message.getBytes("UTF-8"));

            StringBuilder sb = new StringBuilder(2 * hash.length);
            for (byte b : hash) {
                sb.append(String.format("%02x", b & 0xff));
            }
            digest = sb.toString();

        } catch (Exception e) {
            Logger.getLogger(FormRfid.class.getName()).log(Level.SEVERE, null, e);
        }
        return digest;
    }

    private boolean validasiInput() {
        boolean valid = false;
        if (txt_rfid.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username tidak boleh kosong");
        } else if (txt_rfid.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Password tidak boleh kosong");
        } else {
            valid = true;
        }
        return valid;
    }

    private Map<String, String> checkLoginByRfid(String rfid) {
        Map<String, String> result = new HashMap<>();
        if (conn != null) {
            try {
                String sql = "SELECT * FROM user WHERE RFID = ?";
                PreparedStatement st = conn.prepareStatement(sql);
                st.setString(1, rfid);
                ResultSet rs = st.executeQuery();

                if (rs.next()) {
                    result.put("ID_User", rs.getString("ID_User"));
                    result.put("Username", rs.getString("Username"));
                    result.put("Role", rs.getString("Role"));
                    return result;
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    private void autoLoginRfid() {
        String rfid = txt_rfid.getText().trim();

        // Batasi: hanya jika panjang RFID mencukupi
        if (rfid.length() < 10) {
            return;
        }

        Map<String, String> loginResult = checkLoginByRfid(rfid);

        if (loginResult != null) {
           String userID = loginResult.get("ID_User");
            String namaUser = loginResult.get("Username");
            String role = loginResult.get("Role");

            MenuUtama mn = new MenuUtama(userID, namaUser, role);
            mn.setVisible(true);
            dispose();
        } else {
            // Kosongkan isi RFID hanya setelah form selesai proses event
            SwingUtilities.invokeLater(() -> {
                txt_rfid.setText("");
            });
            JOptionPane.showMessageDialog(this, "RFID tidak dikenali!", "Pesan", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void prosesLogin() {
        String rfid = txt_rfid.getText().trim();

        if (rfid.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Silakan tempelkan kartu RFID terlebih dahulu.");
            return;
        }

        Map<String, String> loginResult = checkLoginByRfid(rfid);

        if (loginResult != null) {
            String userID = loginResult.get("ID_User");
            String namaUser = loginResult.get("Username");
            String role = loginResult.get("Role");

            MenuUtama mn = new MenuUtama(userID, namaUser, role);
            mn.setVisible(true);
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "RFID tidak dikenali!", "Pesan", JOptionPane.INFORMATION_MESSAGE);
            txt_rfid.setText(""); // Kosongkan field agar bisa scan ulang
        }
    }



}
