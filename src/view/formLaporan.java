/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import config.koneksi;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MyBook Hype AMD
 */
public class formLaporan extends javax.swing.JPanel {

    private final Connection conn;
    
    private SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");
    private Date tanggalMulai;
    private Date tanggalAkhir;
        

    public formLaporan() {
        initComponents();

        conn = koneksi.getConnection();
         setTableModel();
        loadData();
        actionButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new com.raven.datechooser.DateChooser();
        dateChooser2 = new com.raven.datechooser.DateChooser();
        pn_main = new javax.swing.JPanel();
        pn_view = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBatal = new Palette.Custom_ButtonRounded();
        btnTampilkan = new Palette.Custom_ButtonRounded();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new Palette.JTable_Custom();
        txtPencarian = new Palette.JTextfieldRounded();
        btnPrint = new Palette.Custom_ButtonRounded();
        txtTanggalAkhir = new Palette.JTextfieldRounded();
        txtTanggalMulai = new Palette.JTextfieldRounded();

        dateChooser1.setTextRefernce(txtTanggalMulai);

        dateChooser2.setTextRefernce(txtTanggalAkhir);

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.CardLayout());

        pn_main.setBackground(new java.awt.Color(35, 12, 20));
        pn_main.setLayout(new java.awt.CardLayout());

        pn_view.setBackground(new java.awt.Color(35, 12, 20));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ktegory.png"))); // NOI18N
        jLabel5.setText("jLabel5");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Laporan Penjualan");

        btnBatal.setBackground(new java.awt.Color(105, 33, 58));
        btnBatal.setText("Batal");
        btnBatal.setFillOriginal(new java.awt.Color(105, 33, 58));
        btnBatal.setFillOver(new java.awt.Color(105, 33, 58));
        btnBatal.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnBatal.setPreferredSize(new java.awt.Dimension(120, 19));
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        btnTampilkan.setBackground(new java.awt.Color(102, 153, 255));
        btnTampilkan.setText("Tampilkan");
        btnTampilkan.setFillOriginal(new java.awt.Color(105, 33, 58));
        btnTampilkan.setFillOver(new java.awt.Color(105, 33, 58));
        btnTampilkan.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnTampilkan.setPreferredSize(new java.awt.Dimension(120, 19));
        btnTampilkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTampilkanActionPerformed(evt);
            }
        });

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblData);

        txtPencarian.setForeground(new java.awt.Color(255, 255, 255));
        txtPencarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPencarianActionPerformed(evt);
            }
        });
        txtPencarian.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPencarianKeyReleased(evt);
            }
        });

        btnPrint.setBackground(new java.awt.Color(105, 33, 58));
        btnPrint.setText("Print");
        btnPrint.setFillOriginal(new java.awt.Color(105, 33, 58));
        btnPrint.setFillOver(new java.awt.Color(105, 33, 58));
        btnPrint.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnPrint.setPreferredSize(new java.awt.Dimension(120, 19));
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        txtTanggalAkhir.setForeground(new java.awt.Color(255, 255, 255));
        txtTanggalAkhir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTanggalAkhirActionPerformed(evt);
            }
        });
        txtTanggalAkhir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTanggalAkhirKeyReleased(evt);
            }
        });

        txtTanggalMulai.setForeground(new java.awt.Color(255, 255, 255));
        txtTanggalMulai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTanggalMulaiActionPerformed(evt);
            }
        });
        txtTanggalMulai.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTanggalMulaiKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pn_viewLayout = new javax.swing.GroupLayout(pn_view);
        pn_view.setLayout(pn_viewLayout);
        pn_viewLayout.setHorizontalGroup(
            pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_viewLayout.createSequentialGroup()
                .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_viewLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator2)
                            .addGroup(pn_viewLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))))
                    .addGroup(pn_viewLayout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(pn_viewLayout.createSequentialGroup()
                                .addComponent(txtTanggalMulai, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTanggalAkhir, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnTampilkan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtPencarian, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        pn_viewLayout.setVerticalGroup(
            pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_viewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_viewLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pn_viewLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPencarian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTampilkan, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTanggalAkhir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTanggalMulai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(215, Short.MAX_VALUE))
        );

        pn_main.add(pn_view, "card2");

        add(pn_main, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btnTampilkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTampilkanActionPerformed
        
    }//GEN-LAST:event_btnTampilkanActionPerformed

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
//       if(btnTampilkan.getText().equals("Tambah")){
//           btnTampilkan.setText("Perbarui");
//           btnBatal.setVisible(true);
//           btnPrint.setVisible(true);
//       }
    }//GEN-LAST:event_tblDataMouseClicked

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        loadData();
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        showPanel();
        loadData();
    }//GEN-LAST:event_btnBatalActionPerformed

    private void txtPencarianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPencarianActionPerformed
       
    }//GEN-LAST:event_txtPencarianActionPerformed

    private void txtPencarianKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPencarianKeyReleased
     String keyword = txtPencarian.getText().trim(); // Ambil kata kunci dari field pencarian
    DefaultTableModel model = (DefaultTableModel) tblData.getModel(); // Ganti "table" dengan nama JTable kamu
    searchData(model, keyword);
    }//GEN-LAST:event_txtPencarianKeyReleased

    private void txtTanggalAkhirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTanggalAkhirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTanggalAkhirActionPerformed

    private void txtTanggalAkhirKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTanggalAkhirKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTanggalAkhirKeyReleased

    private void txtTanggalMulaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTanggalMulaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTanggalMulaiActionPerformed

    private void txtTanggalMulaiKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTanggalMulaiKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTanggalMulaiKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Palette.Custom_ButtonRounded btnBatal;
    private Palette.Custom_ButtonRounded btnPrint;
    private Palette.Custom_ButtonRounded btnTampilkan;
    private com.raven.datechooser.DateChooser dateChooser1;
    private com.raven.datechooser.DateChooser dateChooser2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel pn_main;
    private javax.swing.JPanel pn_view;
    private Palette.JTable_Custom tblData;
    private Palette.JTextfieldRounded txtPencarian;
    private Palette.JTextfieldRounded txtTanggalAkhir;
    private Palette.JTextfieldRounded txtTanggalMulai;
    // End of variables declaration//GEN-END:variables

     private void actionButton() {
    btnTampilkan.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            getData((DefaultTableModel) tblData.getModel());
        }
    });

    btnBatal.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            showPanel();
            loadData();
        }
    });

    btnPrint.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Implementasi print akan ditambahkan nanti
            JOptionPane.showMessageDialog(null, "Fitur print belum diimplementasikan.");
        }
    });

//    txtPencarian.addActionListener(new ActionListener() {
//        @Override
//        public void actionPerformed(ActionEvent e) {
//            searchData();
//        }
//    });
}
    
    private void loadData() {
    setTableModel(); 
}

    
    private void showPanel(){
        pn_main.removeAll();
        pn_main.add(new formLaporan());
        pn_main.repaint();
        pn_main.revalidate();
    }
    
    private void resetForm() {
    txtTanggalMulai.setText("");
    txtTanggalMulai.setText("");
    txtPencarian.setText("");
    setTableModel(); // Kosongkan tabel
}


    private void setTableModel() {
    DefaultTableModel model = new DefaultTableModel();
    model.setColumnIdentifiers(new String[]{
        "Id_Transaksi", 
        "Nama_Menu",
        "Jumlah",
        "Username", 
        "Nama_Pelanggan", 
        "Tanggal", 
        "Total_Harga", 
        "Bayar", 
        "Kembali", 
        "Diskon"
    });
    tblData.setModel(model);
}

    
   private void getData(DefaultTableModel model) {
    model.setRowCount(0); // Hapus data lama

    String tanggalMulaiStr = txtTanggalMulai.getText().trim();
    String tanggalAkhirStr = txtTanggalAkhir.getText().trim();

    if (tanggalMulaiStr.isEmpty() || tanggalAkhirStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Silakan pilih rentang tanggal terlebih dahulu.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Ubah format untuk sesuai dengan input: dd-MM-yyyy
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        dateFormat.setLenient(false);
        this.tanggalMulai = dateFormat.parse(tanggalMulaiStr);
        this.tanggalAkhir = dateFormat.parse(tanggalAkhirStr);

        // Format ulang ke yyyy-MM-dd untuk digunakan dalam query
        SimpleDateFormat sqlFormat = new SimpleDateFormat("yyyy-MM-dd");
        String tanggalMulaiSql = sqlFormat.format(this.tanggalMulai);
        String tanggalAkhirSql = sqlFormat.format(this.tanggalAkhir);

        // Tambahkan waktu untuk rentang hari penuh
        SimpleDateFormat dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String startDateTime = tanggalMulaiSql + " 00:00:00";
        String endDateTime = tanggalAkhirSql + " 23:59:59";
        Date startDate = dateTimeFormat.parse(startDateTime);
        Date endDate = dateTimeFormat.parse(endDateTime);

        String sql = "SELECT TR.Id_Transaksi, " +
                     "GROUP_CONCAT(M.Nama_Menu SEPARATOR ', ') AS Nama_Menu, " +
                     "SUM(det.Jumlah) AS Total_Jumlah, " + // Agregasi Jumlah dengan SUM
                     "US.Username, " +
                     "PG.Nama_Pelanggan, " +
                     "TR.Tanggal, TR.Total_Harga, TR.Bayar, TR.Kembali, TR.Diskon " +
                     "FROM transaksi TR " +
                     "INNER JOIN user US ON US.Id_User = TR.Id_User " +
                     "INNER JOIN pelanggan PG ON PG.Id_Pelanggan = TR.Id_Pelanggan " +
                     "LEFT JOIN detail_transaksi det ON det.Id_Transaksi = TR.Id_Transaksi " +
                     "LEFT JOIN menu M ON M.Id_Menu = det.Id_Menu " +
                     "WHERE TR.Tanggal BETWEEN ? AND ? " +
                     "GROUP BY TR.Id_Transaksi, US.Username, PG.Nama_Pelanggan, TR.Tanggal, TR.Total_Harga, TR.Bayar, TR.Kembali, TR.Diskon " +
                     "ORDER BY TR.Tanggal ASC";

        if (conn == null) {
            throw new SQLException("Koneksi database tidak tersedia.");
        }

        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setTimestamp(1, new Timestamp(startDate.getTime()));
            st.setTimestamp(2, new Timestamp(endDate.getTime()));

            ResultSet rs = st.executeQuery();
            boolean dataDitemukan = false;

            SimpleDateFormat displayFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            while (rs.next()) {
                Object[] row = {
                    rs.getString("Id_Transaksi"),
                    rs.getString("Nama_Menu") != null ? rs.getString("Nama_Menu") : "-",
                    rs.getInt("Total_Jumlah"), // Ambil nilai agregat Total_Jumlah
                    rs.getString("Username"),
                    rs.getString("Nama_Pelanggan"),
                    displayFormat.format(rs.getTimestamp("Tanggal")),
                    rs.getDouble("Total_Harga"),
                    rs.getDouble("Bayar"),
                    rs.getDouble("Kembali"),
                    rs.getDouble("Diskon")
                };
                model.addRow(row);
                dataDitemukan = true;
            }

            if (!dataDitemukan) {
                JOptionPane.showMessageDialog(this, "Data tidak ditemukan pada rentang tanggal tersebut.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    } catch (java.text.ParseException e) {
        JOptionPane.showMessageDialog(this, "Format tanggal tidak valid. Gunakan format dd-MM-yyyy (contoh: 29-05-2025).", "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

private void searchData(DefaultTableModel model, String keyword) {
    model.setRowCount(0); // Hapus data lama

    String tanggalMulaiStr = txtTanggalMulai.getText().trim();
    String tanggalAkhirStr = txtTanggalAkhir.getText().trim();

    if (tanggalMulaiStr.isEmpty() || tanggalAkhirStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Silakan pilih rentang tanggal terlebih dahulu.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Ubah format untuk sesuai dengan input: dd-MM-yyyy
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        dateFormat.setLenient(false);
        this.tanggalMulai = dateFormat.parse(tanggalMulaiStr);
        this.tanggalAkhir = dateFormat.parse(tanggalAkhirStr);

        // Format ulang ke yyyy-MM-dd untuk digunakan dalam query
        SimpleDateFormat sqlFormat = new SimpleDateFormat("yyyy-MM-dd");
        String tanggalMulaiSql = sqlFormat.format(this.tanggalMulai);
        String tanggalAkhirSql = sqlFormat.format(this.tanggalAkhir);

        // Tambahkan waktu untuk rentang hari penuh
        SimpleDateFormat dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String startDateTime = tanggalMulaiSql + " 00:00:00";
        String endDateTime = tanggalAkhirSql + " 23:59:59";
        Date startDate = dateTimeFormat.parse(startDateTime);
        Date endDate = dateTimeFormat.parse(endDateTime);

        // Query dengan pencarian menggunakan LIKE
        String sql = "SELECT TR.Id_Transaksi, " +
                     "GROUP_CONCAT(M.Nama_Menu SEPARATOR ', ') AS Nama_Menu, " +
                     "SUM(det.Jumlah) AS Total_Jumlah, " + // Agregasi Jumlah dengan SUM
                     "US.Username, " +
                     "PG.Nama_Pelanggan, " +
                     "TR.Tanggal, TR.Total_Harga, TR.Bayar, TR.Kembali, TR.Diskon " +
                     "FROM transaksi TR " +
                     "INNER JOIN user US ON US.Id_User = TR.Id_User " +
                     "INNER JOIN pelanggan PG ON PG.Id_Pelanggan = TR.Id_Pelanggan " +
                     "LEFT JOIN detail_transaksi det ON det.Id_Transaksi = TR.Id_Transaksi " +
                     "LEFT JOIN menu M ON M.Id_Menu = det.Id_Menu " +
                     "WHERE TR.Tanggal BETWEEN ? AND ? " +
                     "AND (M.Nama_Menu LIKE ? OR US.Username LIKE ? OR PG.Nama_Pelanggan LIKE ? OR DATE_FORMAT(TR.Tanggal, '%Y-%m-%d') LIKE ?) " +
                     "GROUP BY TR.Id_Transaksi, US.Username, PG.Nama_Pelanggan, TR.Tanggal, TR.Total_Harga, TR.Bayar, TR.Kembali, TR.Diskon " +
                     "ORDER BY TR.Tanggal ASC";

        if (conn == null) {
            throw new SQLException("Koneksi database tidak tersedia.");
        }

        try (PreparedStatement st = conn.prepareStatement(sql)) {
            // Set parameter untuk rentang tanggal
            st.setTimestamp(1, new Timestamp(startDate.getTime()));
            st.setTimestamp(2, new Timestamp(endDate.getTime()));
            // Set parameter untuk pencarian (LIKE)
            String searchPattern = "%" + keyword.trim() + "%";
            st.setString(3, searchPattern); // Untuk Nama_Menu
            st.setString(4, searchPattern); // Untuk Username
            st.setString(5, searchPattern); // Untuk Nama_Pelanggan
            st.setString(6, searchPattern); // Untuk Tanggal (setelah konversi ke string)

            ResultSet rs = st.executeQuery();
            boolean dataDitemukan = false;

            SimpleDateFormat displayFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            while (rs.next()) {
                Object[] row = {
                    rs.getString("Id_Transaksi"),
                    rs.getString("Nama_Menu") != null ? rs.getString("Nama_Menu") : "-",
                    rs.getInt("Total_Jumlah"), // Ambil nilai agregat Total_Jumlah
                    rs.getString("Username"),
                    rs.getString("Nama_Pelanggan"),
                    displayFormat.format(rs.getTimestamp("Tanggal")),
                    rs.getDouble("Total_Harga"),
                    rs.getDouble("Bayar"),
                    rs.getDouble("Kembali"),
                    rs.getDouble("Diskon")
                };
                model.addRow(row);
                dataDitemukan = true;
            }
        }
    } catch (java.text.ParseException e) {
        JOptionPane.showMessageDialog(this, "Format tanggal tidak valid. Gunakan format dd-MM-yyyy (contoh: 29-05-2025).", "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
}
